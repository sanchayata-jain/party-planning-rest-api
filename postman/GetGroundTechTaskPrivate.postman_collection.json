{
	"info": {
		"_postman_id": "df2bfbae-9f03-4c1f-b94c-6cdd55aa1ca9",
		"name": "GetGround Tech Task Private Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "001 - Setup",
			"item": [
				{
					"name": "Install Postman BDD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// \"install\" Postman BDD",
									"postman.setGlobalVariable('postmanBDD', responseBody);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// If the \"postman_bdd_path\" environment variable is set, then we'll use it.",
									"// Otherwise, we'll default to the published version",
									"if (!environment.postman_bdd_path) {",
									"    postman.setGlobalVariable('postman_bdd_path', 'http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.min.js');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{postman_bdd_path}}",
							"host": [
								"{{postman_bdd_path}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "002 - Validation",
			"item": [
				{
					"name": "Add table",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5ddf77e6-74fd-4e86-8f10-34fb3d3cff97",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c5082ee5-4d27-4fe0-8c8a-76f3a52d9fd1",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"describe('Add table', function() {",
									"    it('should be a successful json response', () => {",
									"        response.ok.should.be.true;",
									"        response.should.have.status(200);",
									"        response.should.be.json;",
									"    });",
									"",
									"    it('should return id and capacity in the response', () => {",
									"        var table = response.body;",
									"        table.capacity.should.equal(10);",
									"        table.should.have.property(\"id\").and.to.exist;",
									"        ",
									"        postman.setEnvironmentVariable(\"table_id\", table.id);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"capacity\": 10\n}"
						},
						"url": {
							"raw": "http://localhost:3000/tables",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"tables"
							]
						}
					},
					"response": []
				},
				{
					"name": "Negative accompanying_guests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cc97133-119f-44ba-9f2d-1f25f98a6f44",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"describe('Add guest to guestlis with negative accompanying_guestst', function() {",
									"    it('should be a bad request error', () => {",
									"        response.status.should.be.within(400, 499);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b1bee755-3fc7-4f00-bba4-81eb5a5648c9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"table\": 1,\n    \"accompanying_guests\": -1\n}"
						},
						"url": {
							"raw": "http://localhost:3000/guest_list/john",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"guest_list",
								"john"
							]
						}
					},
					"response": [
						{
							"name": "Add john to guestlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table\": 1,\n    \"accompanying_guests\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:3000/guest_list/john",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"guest_list",
										"john"
									]
								}
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"john\"\n}"
						}
					]
				},
				{
					"name": "Exceed table capacity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8433773-c10e-47df-9d7f-9da9c0b48aab",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"describe('Add guest to guestlist exceeding table capacity', function() {",
									"    it('should be a bad request error', () => {",
									"        response.status.should.be.within(400, 499);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17a12662-5cb4-4d27-8301-3caa31057026",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"table\": {{table_id}},\n    \"accompanying_guests\": 10\n}"
						},
						"url": {
							"raw": "http://localhost:3000/guest_list/john",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"guest_list",
								"john"
							]
						}
					},
					"response": [
						{
							"name": "Add john to guestlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table\": 1,\n    \"accompanying_guests\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:3000/guest_list/john",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"guest_list",
										"john"
									]
								}
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"john\"\n}"
						}
					]
				},
				{
					"name": "Table that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8433773-c10e-47df-9d7f-9da9c0b48aab",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"describe('Add guest to guestlist on table that does not exist', function() {",
									"    it('should be a bad request error', () => {",
									"        response.status.should.be.within(400, 499);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17a12662-5cb4-4d27-8301-3caa31057026",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"table\": -1,\n    \"accompanying_guests\": 10\n}"
						},
						"url": {
							"raw": "http://localhost:3000/guest_list/john",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"guest_list",
								"john"
							]
						}
					},
					"response": [
						{
							"name": "Add john to guestlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table\": 1,\n    \"accompanying_guests\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:3000/guest_list/john",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"guest_list",
										"john"
									]
								}
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"john\"\n}"
						}
					]
				},
				{
					"name": "Add guest to guestlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "446c8f44-ccb9-49b9-bd45-48a8ebe1ac65",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"describe('Add guest to guestlist', function() {",
									"    it('should be a successful json response', () => {",
									"        response.ok.should.be.true;",
									"        response.should.have.status(200);",
									"        response.should.be.json;",
									"    });",
									"",
									"    it('should return the name in the response', () => {",
									"        var guest = response.body;",
									"        guest.name.should.equal(\"john\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4f786807-0efa-4684-bf1d-6e4cf06ad629",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"table\": {{table_id}},\n    \"accompanying_guests\": 1\n}"
						},
						"url": {
							"raw": "http://localhost:3000/guest_list/john",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"guest_list",
								"john"
							]
						}
					},
					"response": [
						{
							"name": "Add john to guestlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table\": 1,\n    \"accompanying_guests\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:3000/guest_list/john",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"guest_list",
										"john"
									]
								}
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"john\"\n}"
						}
					]
				},
				{
					"name": "Add guest with same name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d41b9484-934b-472d-8591-bee2c94175e1",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"describe('Add duplicate guest to guestlist', function() {",
									"    it('should be a bad request error', () => {",
									"        response.status.should.be.within(400, 499);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaaf9d90-20c5-40f9-af74-d087b549e2eb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"table\": {{table_id}},\n    \"accompanying_guests\": 1\n}"
						},
						"url": {
							"raw": "http://localhost:3000/guest_list/john",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"guest_list",
								"john"
							]
						}
					},
					"response": [
						{
							"name": "Add john to guestlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"table\": 1,\n    \"accompanying_guests\": 1\n}"
								},
								"url": {
									"raw": "http://localhost:3000/guest_list/john",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"guest_list",
										"john"
									]
								}
							},
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"name\": \"john\"\n}"
						}
					]
				},
				{
					"name": "Check in guest not on list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5236d185-04c2-4548-85e3-baae3c58e453",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9f2eec2-7772-4e15-8115-b37d84e316e7",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"describe('Check in guest not on list', function() {",
									"    it('should be a bad request error', () => {",
									"        response.status.should.be.within(400, 499);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"accompanying_guests\": 1\n}\n"
						},
						"url": {
							"raw": "http://localhost:3000/guests/albert",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"guests",
								"albert"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check out guest not checked in",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69a6c3f1-c3fe-40a2-b5ec-e3966df7a397",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9bdfc3a4-8692-469b-a807-8db9bd2b6221",
								"exec": [
									"eval(globals.postmanBDD);",
									"",
									"describe('Check out guest not checked in', function() {",
									"    it('should be a bad request error', () => {",
									"        response.status.should.be.within(400, 499);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/guests/john",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"guests",
								"john"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"id": "42a3ff65-421e-4990-8ec0-484e00e366c0",
			"key": "base_url",
			"value": "localhost:3000",
			"type": "string"
		}
	]
}